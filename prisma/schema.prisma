generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// generator factories {
//   provider = "prisma-factory"
// }

model cities {
  id       Int    @id @default(autoincrement())
  state_id Int
  name     String @db.VarChar(150)
}

model countries {
  id         Int    @id @default(autoincrement())
  name_code  String @db.VarChar(20)
  name       String @db.VarChar(100)
  phone_code Int
}

model states {
  id         Int    @id @default(autoincrement())
  country_id Int
  name       String @db.VarChar(255)
}

model users {
  id                Int                @id @default(autoincrement())
  name              String             @db.VarChar(150)
  email             String             @unique @db.VarChar(150)
  role_id           Int                @default(0)
  password          String             @db.VarChar(255)
  created_at        DateTime?          @default(now())
  updated_at        DateTime?          @db.Timestamp(0)
  status            Int                @default(1)
  verified          Int                @default(0)
  verification_code String?            @db.VarChar(20)
  code_valid_till   DateTime?
  role              roles              @relation(fields: [role_id], references: [id])
  cases             cases[]
  case_invitations  case_invitations[]
}

model roles {
  id          Int           @id @default(autoincrement())
  name        String        @unique @db.VarChar(150)
  status      Int           @default(1)
  users       users[]
  permissions permissions[]
}

model cases {
  id                    Int                     @id @default(autoincrement())
  case_number           String                  @db.VarChar(50)
  title                 String                  @db.VarChar(255)
  description           String                  @db.LongText
  added_by              Int
  status                Int                     @default(1)
  user                  users                   @relation(fields: [added_by], references: [id])
  case_associated_names case_associated_names[]
  case_milestones       case_milestones[]
  case_documents        case_documents[]
  case_invitations      case_invitations[]
  created_at            DateTime                @default(now())
}

model case_invitations {
  id      Int      @id @default(autoincrement())
  case_id Int
  user_id Int
  status  Int      @default(0) // [0=>sent, 1=> accepted, 2=>expired]
  case    cases    @relation(fields: [case_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user    users    @relation(fields: [user_id], references: [id])
  sent_on DateTime @default(now())
}

model case_associated_names {
  id      Int    @id @default(autoincrement())
  case_id Int
  name    String @db.VarChar(50)
  case    cases  @relation(fields: [case_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model case_milestones {
  id             Int      @id @default(autoincrement())
  case_id        Int
  milestone_date DateTime
  comment        String   @db.VarChar(255)
  case           cases    @relation(fields: [case_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model case_documents {
  id            Int      @id @default(autoincrement())
  case_id       Int
  document_name String   @db.VarChar(100)
  file_name     String   @db.VarChar(100)
  uploaded_on   DateTime
  case          cases    @relation(fields: [case_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model routes {
  id          Int           @id @default(autoincrement())
  parent_id   Int           @default(0)
  label       String?       @db.VarChar(50)
  url         String?       @db.VarChar(200)
  icon        String?       @db.VarChar(50)
  permissions permissions[]

  parent   routes?  @relation("ParentToRoutes", fields: [parent_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children routes[] @relation("ParentToRoutes")
}

model permissions {
  id       Int    @id @default(autoincrement())
  role_id  Int
  route_id Int
  route    routes @relation(fields: [route_id], references: [id])
  role     roles? @relation(fields: [role_id], references: [id])
}

model questions {
  id       Int       @id @default(autoincrement())
  question String    @db.Text
  status   Boolean   @default(true)
  options  options[]
}

model options {
  id          Int       @id @default(autoincrement())
  question_id Int
  option      String    @db.Text
  status      Boolean   @default(false)
  question    questions @relation(fields: [question_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model email_templates {
  id         Int    @id @default(autoincrement())
  subject    String @db.VarChar(255)
  from_email String @db.VarChar(100)
  from_label String @db.VarChar(100)
  content    String @db.LongText
}
